---
layout: post
title: "执行上下文"
date: 2018-05-14
categories:
  - Juice
description: 
image: https://unsplash.it/2000/1200?image=80
image-sm: https://unsplash.it/2000/1200?image=80
---

- 代码分类（位置）
    * 全局代码
    * 函数（局部）代码
- 全局执行上下文
  * 在执行全局代码前window确定为全局执行上下文
  * 对全局数据进行预处理
    * var定义的全局变量==>undefined，添加为windo属性
    * function声明的全局函数==>赋值（fun），添加为window的方法
    * this  ==> 赋值（window）
  * 开始执行全局代码
- 函数执行上下文
  * 在调用函数，准备执行函数体之前，创建对应的函数执行上下文对象（虚拟的，存在于栈中）
  * 对局部数据进行预处理
    * 形参变量==>赋值（实参）==>添加为执行上下文的属性
    * arguments==>赋值（实参列表）,添加为执行上下文的属性
    * var定义的局部变量==>undefined，添加为执行上下文的属性
    * function声明的函数==>赋值（fun），添加为执行上下文的方法
    * this==>赋值（调用函数的对象）
* 开始执行函数体代码

```
 console.log(a1, window.a1)
  //输出undefined undefined
  window.a2()
  //输出 a2()
  console.log(this)
//输出window

  var a1 = 3
  function a2() {
    console.log('a2()')
  }
  console.log(a1)
  //输出 3
```
----------------------------------
#执行上下文栈
- 在全局代码执行前，JS引擎会创建一个栈来存储管理所以的执行上下文对象
- 在全局执行上下文（window）确定后，将其添加到栈中（压栈）
- 在函数执行上下文创建后，将其添加到栈中（压栈）
- 在当前函数执行完后，将栈顶的对象移除（出栈）
- 当所有的代码执行完后，栈中只剩下window

![image.png](https://upload-images.jianshu.io/upload_images/3378252-062d164ec62741f9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)

提问 这里面执行了几个上下文？
```
var a = 10
  var bar = function (x) {
    var b = 5
    foo(x + b)
  }
  var foo = function (y) {
    var c = 5
    console.log(a + c + y)
  }
  bar(10)
```
回答:3个

-------------------------------------------

执行上下文栈2
问题：
- 执行下面代码，依次输出什么？
- 整个过程中产生了几个执行上下文？
```
console.log('gb: '+ i)
  var i = 1
  foo(1)
  function foo(i) {
    if (i == 4) {
      return
    }
    console.log('fb:' + i)
    foo(i + 1) //递归调用: 在函数内部调用自己
    console.log('fe:' + i)
  }
  console.log('ge: ' + i)
```
![IMG_2343(20180514-191222).jpg](https://upload-images.jianshu.io/upload_images/3378252-532ee00b086acd93.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)

------------------------------------------
#相关经典面试题
```
  /*
   测试题1:  先执行变量提升, 再执行函数提升
   */
function a() {}
var a
console.log(typeof a)
//输出 function

  /*
   测试题2:
   */
  if (!(b in window)) {
    var b = 1
  }
  console.log(b) 
//输出 undefined

  /*
   测试题3:
   */
var c = 1
function c(c) {
    console.log(c)
    var c = 3
}
c(2)
//输出  error  c is not a function
//我们可以把这个代码变成这样来理解,会稍微简单些:
//var c;
//function c(c){....}
//c=1;
//c(2);  //报错
```
