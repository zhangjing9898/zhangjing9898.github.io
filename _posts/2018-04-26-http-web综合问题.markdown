---
layout: post
title: "初识webpack"
date: 2017-09-08
categories:
  - Juice
description: 
image: https://unsplash.it/2000/1200?image=900
image-sm: https://unsplash.it/2000/1200?image=900
---

#HTTP web综合问题

###1.Html5语义化理解

* 用正确的标签做正确的事
* html语义化就是让页面的内容结构化，便于浏览器、搜索引擎解析
* 在没有样式 CSS 情况下也可以以一种文档格式显示，可读性强
* 让阅读源代码的人  更容易将网站分块  便于阅读维护理解

###2.HTML5为什么只需要写<!DOCTYPE HTML>？

* html5 不需要对DTD（document type definition）进行引用，但是需要doctype来规范浏览器行为

#CSS部分

###1.css优先级

* 载入样式以最后载入的定位为准

* 优先级为:!important>行内>id>class>tag>通配符>继承>默认


https://blog.csdn.net/qq_28300493/article/details/52297165

###说说你对AMD和Commonjs的理解

- CommonJS是`服务器端模块`的规范，`Node.js`采用了这个规范。CommonJS规范加载模块是`同步`的，也就是说，只有加载完成，才能执行后面的操作。AMD规范则是`非同步加载模块`，允许指定`回调函数`

- AMD推荐的风格通过返回`一个对象`做为模块对象，CommonJS的风格通过对module.exports或exports的属性赋值来达到`暴露模块`对象的目的

###用过哪些设计模式？

* 工厂模式
    -  工厂模式解决了重复实例化的问题，但还有一个问题,那就是识别问题，因为根本无法
    - 主要好处就是可以消除对象间的耦合，通过使用工程方法而不是new关键字

工厂模式
  * 套路: 通过工厂函数动态创建对象并返回
  * 适用场景: 需要创建多个对象
  * 问题: 对象没有一个具体的类型, 都是Object类型
这是一个代码实例，更加形象:

```
<script type="text/javascript">
  function createPerson(name, age) { //返回一个对象的函数===>工厂函数
    var obj = {
      name: name,
      age: age,
      setName: function (name) {
        this.name = name
      }
    }

    return obj
  }

  // 创建2个人
  var p1 = createPerson('Tom', 12)
  var p2 = createPerson('Bob', 13)

  // p1/p2是Object类型

  function createStudent(name, price) {
    var obj = {
      name: name,
      price: price
    }
    return obj
  }
  var s = createStudent('张三', 12000)
  // s也是Object
</script>
```
* 构造函数模式
    - 使用构造函数的方法，即解决了重复实例化的问题，又解决了对象识别的问题，该模式与工厂模式的不同之处在于
    - 直接将属性和方法赋值给 this对象;

 自定义构造函数模式
  * 套路: 自定义构造函数, 通过new创建对象
  * 适用场景: 需要创建多个类型确定的对象
  * 问题: 每个对象都有相同的数据, 浪费内存

```
		<script type="text/javascript">
			//定义类型
			function Person(name, age) {
				this.name = name
				this.age = age
				this.setName = function(name) {
					this.name = name
				}
			}
			var p1 = new Person('Tom', 12)
			p1.setName('Jack')
			console.log(p1.name, p1.age)
			console.log(p1 instanceof Person)

			function Student(name, price) {
				this.name = name
				this.price = price
			}
			var s = new Student('Bob', 13000)
			console.log(s instanceof Student)

			var p2 = new Person('JACK', 23)
			console.log(p1, p2)
		</script>
```

###length的巧妙用法
```
                        var arr1=arr2=[1,2,3];
			//清空数组
			arr1.length=0;
			console.log(arr1,arr2);
			//output '' ''
			//截断array
			arr1.length=1;
			console.log(arr1,arr2);
			//output [1]
```
###合并数组的巧妙方法
 ```
//普通方法 concat
arr1=[1,2,3]
[1, 2, 3]
arr2=[4,5,6]
[4, 5, 6]
arr1.concat(arr2)
[1, 2, 3, 4, 5, 6]
//用push
let arr1 = [1, 2, 3, 4, 5];
let arr2 = [6, 7, 8, 9, 10];

Array.prototype.push.apply(arr1, arr2);
```
###判断是否为数组
//在es5中
isArray方法  Boolean
//其他方法
array.prototype.toString=="object array"
